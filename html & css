Popper.js in bootstrap4:-
========================
--> popper.js is used to EASILY POSITION TOOLTIPS, POPOVERS OR ANYTHING
--> Tooltips,modals rely on the 3rd party library Popper.js for positioning.
    Popovers rely on the 3rd party library Popper.js for positioning.
    Dropdowns are built on a third party library, Popper.js, which provides dynamic positioning and viewport detection.
--> above are the Bootstrap 4 components that need Popper.js.
--> you can still use Bootstrap 4 JS without Popper, if you don't need tooltips, popovers nor dropdowns.
--> Proper.js is not required if you use bootstrap.bundle.js or bootstrap.bundle.min.js instead of bootstrap.js or bootstrap.min.js
--> we will use html5shiv.min.js and respond.js in bootstrap3
         <!--[if lt IE 9]>
              <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
              <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
        <![endif]-->
-->  HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries 
-->  WARNING: Respond.js doesn't work if you view the page via file:// 
--> IE8 support was dropped in bootstrap4
--> It's currently unclear if there will be a partial support with a HTML5 shiv and respond.js or not.
    It seems though that if you need Internet Explorer 8 support, you'll have to stick to using Bootstrap 3.
--> in bootstrap4 all of the plugins have been written in ES6 and compiled with Babel. This means maintaining the plugins will be a lot easier.
--> bootstrap4 written in sass, where as bootstrap3 written in less.
--> boostrap4 supports for ie9<
--> bootstrap3 supports for ie7<
--> IE 6-9 versions not supports for flex property
--> bootstrap brower supports..
            Chrome >= 45
            Firefox >= 38
            Edge >= 12
            Explorer >= 10
            iOS >= 9
            Safari >= 9
            Android >= 4.4
            Opera >= 30
--> all boostrap plugins depends on jquery, versions 1.9.1 - 3 of jquery supported for bootstrap.
--> dropdowns, popovers and tooltips also depend on Popper.js.
--> transform-origin property changes the origin of the transform where it should start
            ex:- trnasform-origin: right center;
                 trnasform-origin: left center;  ---etc
--> button hover effects can be found here https://ianlunn.github.io/Hover/                 


Internet Explorer:-
------------------
    Internet Explorer 10+ is supported; IE9 and down is not. Please be aware that some CSS3 properties and HTML5 elements 
    are not fully supported in IE10, or require prefixed properties for full functionality. Visit Can I useâ€¦ for details on 
    browser support of CSS3 and HTML5 features. If you require IE8-9 support, use Bootstrap 3.









vendor prefixes:-
================
-->      Prefix	      Browser(s)
        -webkit-	  Google Chrome, Safari, Android Browser
        -moz-	      Firefox
        -o-	          Opera
        -ms-	      Internet Explorer, Edge
--> There will be certain times when vendor prefixes are required by certain browsers. 
--> The purpose of a vendor prefix allows browsers to support newer CSS features before that feature is fully supported by the browser.
--> we can use http://shouldiprefix.com website to know whether it the property requires prefixes or not.
--> we can use https://autoprefixer.github.io/ for autoprefixer online.



flex properties:-
================
--> we use flex propertie to the child elements of the flex parent element
--> flex:1 allows the child elements to take the equal with irrespective of its content
--> The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.
    .flex-container {
      display: flex;
      flex-flow: row wrap;
    }
--> The align-content property is used when there is more child elements and wrapping into next line
    then we align the flex lines vertically using align-content.
--> The flex-basis property specifies the initial length of a flex item.
--> The align-self property specifies the alignment for the selected item inside the flexible container.
--> The align-self is a child element property used to align the element vertically, it overrides the default 
    alignment set by the container's align-items property.

CSS Animations:-
================
--> CSS animations allows animation of most HTML elements without using JavaScript or Flash!
--> What are CSS Animations?
An animation lets an element gradually change from one style to another.

You can change as many CSS properties you want, as many times you want.

To use CSS animation, you must first specify some keyframes for the animation.

Keyframes hold what styles the element will have at certain times.
--> When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times.
ex:-   div {
    width: 100px;
    height: 100px;
    background-color: red;
    -webkit-animation-name: example; /* Safari 4.0 - 8.0 */
    -webkit-animation-duration: 4s; /* Safari 4.0 - 8.0 */
    animation-name: example;
    animation-duration: 4s;
}

/* Safari 4.0 - 8.0 */
@-webkit-keyframes example {
    from {background-color: red;}
    to {background-color: yellow;}
}

/* Standard syntax */
@keyframes example {
    from {background-color: red;}
    to {background-color: yellow;}
}
 
Note: The animation-duration property defines how long time an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). 

In the example above we have specified when the style will change by using the keywords "from" and "to" (which represents 0% (start) and 100% (complete)).

It is also possible to use percent. By using percent, you can add as many style changes as you like.

/* The animation code */
@keyframes example {
    0%   {background-color: red;}
    25%  {background-color: yellow;}
    50%  {background-color: blue;}
    100% {background-color: green;}
}

/* The element to apply the animation to */
div {
    width: 100px;
    height: 100px;
    background-color: red;
    animation-name: example;
    animation-duration: 4s;
}

The following example will change both the background-color and the position of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:

/* The animation code */
@keyframes example {
    0%   {background-color:red; left:0px; top:0px;}
    25%  {background-color:yellow; left:200px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    75%  {background-color:green; left:0px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
}

/* The element to apply the animation to */
div {
    width: 100px;
    height: 100px;
    position: relative;
    background-color: red;
    animation-name: example;
    animation-duration: 4s;
}

The animation-delay property specifies a delay for the start of an animation.

The following example has a 2 seconds delay before starting the animation:

Example:-
div {
    width: 100px;
    height: 100px;
    position: relative;
    background-color: red;
    animation-name: example;
    animation-duration: 4s;
    animation-delay: 2s;
}

background image:-
=================
--> background:url('');
--> background-attachment describes whether the background image should scroll with the content or not, if the value is fixed the background 
    image will not scroll with the content.
--> we can also use the value as local then the background image will scroll with the content of that section.


Creating play and pause buttons with css:-
=========================================
-->  https://css-tricks.com/making-pure-css-playpause-button/

Units:-
=======
--> rem 
   =====
    it takes the font size from the document
    html{
        font-size:16px;
    }
    h1{
        font-size:2rem;
    }
   --> now the font-size of h1 equal to 32px
--> em
   ====
   it takes the font size from its parent
   <div class"abc">
        <h1>hello</h1>
   </div>
    html{
        font-size:16px;
    }
   .abc{
    font-size:20px;
   }
   .abc h1{
    font-size:2em;
   }
   now the font size of the h1 is 40px
--> if you have a fixed width or font-size use px.
--> if you have variable font-size use rem.
data-* Attributes:-
=================
--> we can set the data attributes for the html elements
--> The data-* attributes is used to store custom data private to the page or application.
--> The data-* attributes gives us the ability to embed custom data attributes on all HTML elements.
--> The stored (custom) data can then be used in the page's JavaScript to create a more engaging user experience (without any Ajax calls or server-side database queries).
--> The data-* attributes consist of two parts:
--> The attribute name should not contain any uppercase letters, and must be at least one character long after the prefix "data-"
-->The attribute value can be any string
-->Note: Custom attributes prefixed with "data-" will be completely ignored by the user agent.
--> for ex if we want to show the score of an image, we need to take one span element
--> ex:-
    <div class="image" data-score="20"></div>
     <div class="image" data-score="40"></div>
--> now we can the data attribute values using css
    .sprite::after{
        content:attr(data-score);
    }
--> we can also write the css for the data-attributes
    div.image[data-score="20"]{
        color:red;
    }
--> now we can change the value of data attributes using javascript
        var character = document.querySelector(".sprite");
                    or
        var character = document.querySelectorAll(".sprite");
        character.dataset.score = "100";
--> now the value of data-score is 100
--> one note while using the dataset in javascript to get the data-attribute values, that is dataset is not available in old browsers
--> instead of dataset we can use getAttributes method

--> Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). 
    Be sure to only use one set of data attributes on a single element (e.g., you cannot trigger a tooltip and modal from the same button.)



Normalize.css:-
==============
    https://www.codesandnotes.com/front-end/understanding-browser-styles-and-normalize/
    
--> All browsers add default CSS styles to web pages, so called â€˜user agent stylesâ€™. 
    This is what makes a <button> actually look like a button. This is what creates the margin between paragraphs and headers and so on.    
--> If the browser didnâ€™t come with any default styles and you didnâ€™t add any more styles, nothing would set the HTML elements apart. They would lose their visual meaning. But it does some with default styles. Unless you are happy with these styles, you are going to embark on a journey to with your own design.

    For instance, the <h1> element come with the following rules in my current browser:
    h1 {
        display: block;
        font-size: 2em;
        font-weight: bold;
    }
    This might be exactly the design you are looking for but chances are itâ€™s not. There is no way to avoid user agent styles but 
    you can overwrite them.
